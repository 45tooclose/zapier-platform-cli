#compdef zapier

getOptions() {
    local helpOpts=()
    local loginOpts=()
    local logoutOpts=()
    local initOpts=("--template:'select a starting app template'")
    local registerOpts=()
    local scaffoldOpts=("--dest:'sets the new files path'" "--entry:'where to import the new file'")
    local describeOpts=()
    local testOpts=("--quiet:'do not print zapier detailed logs to standard out'" "--very-quiet:'do not print zapier summary or detail logs to standard out'")
    local linkOpts=()
    local appsOpts=()
    local versionsOpts=()
    local validateOpts=()
    local buildOpts=("--disable-dependency-detection:'disables walking required files to slim the build'" "--include-js-map:'include .js.map files (usually source maps'")
    local uploadOpts=()
    local pushOpts=("--disable-dependency-detection:'disables walking required files to slim the build'" "--include-js-map:'include .js.map files (usually source maps'")
    local promoteOpts=()
    local migrateOpts=()
    local deprecateOpts=()
    local historyOpts=()
    local logsOpts=("--version:'display only this versions logs (default is all versions)'" "--status:'display only success logs (status code < 400 / info) or error (status code > 400 / tracebacks)'" "--type:'display only console or http logs'" "--detailed:'show detailed logs (like request/response body and headers)'" "--user:'display only this users logs'" "--limit:'control the maximum result size'")
    local envOpts=("--remove:'optionally remove environment variable with this key'")
    local convertOpts=()

    local cmd=$words[2]
    case $cmd in
        help)
               _describe 'options' helpOpts
               ;;
        login)
               _describe 'options' loginOpts
               ;;
        logout)
               _describe 'options' logoutOpts
               ;;
        init)
               _describe 'options' initOpts
               ;;
        register)
               _describe 'options' registerOpts
               ;;
        scaffold)
               _describe 'options' scaffoldOpts
               ;;
        describe)
               _describe 'options' describeOpts
               ;;
        test)
               _describe 'options' testOpts
               ;;
        link)
               _describe 'options' linkOpts
               ;;
        apps)
               _describe 'options' appsOpts
               ;;
        versions)
               _describe 'options' versionsOpts
               ;;
        validate)
               _describe 'options' validateOpts
               ;;
        build)
               _describe 'options' buildOpts
               ;;
        upload)
               _describe 'options' uploadOpts
               ;;
        push)
               _describe 'options' pushOpts
               ;;
        promote)
               _describe 'options' promoteOpts
               ;;
        migrate)
               _describe 'options' migrateOpts
               ;;
        deprecate)
               _describe 'options' deprecateOpts
               ;;
        history)
               _describe 'options' historyOpts
               ;;
        logs)
               _describe 'options' logsOpts
               ;;
        env)
               _describe 'options' envOpts
               ;;
        convert)
               _describe 'options' convertOpts
               ;;
    esac
}

getCommands() {
    local -a options
    options=("help:'Lists all the commands you can use.'" "login:'Configure your ~/.zapierrc with a deploy key.'" "logout:'Deactivates all your personal deploy keys and resets ~/.zapierrc.'" "init:'Initializes a new Zapier app in a directory.'" "register:'Registers a new app in your account.'" "scaffold:'Adds a starting resource, trigger, action or search to your app.'" "describe:'Describes the current app.'" "test:'Tests your app via npm test.'" "link:'Link the current directory to an app you have access to.'" "apps:'Lists all the apps you can access.'" "versions:'Lists all the versions of the current app.'" "validate:'Validates the current app.'" "build:'Builds a pushable zip from the current directory.'" "upload:'Upload the last build as a version.'" "push:'Build and upload the current app - does not promote.'" "promote:'Promotes a specific version to global access.'" "migrate:'Migrate users from one version of your app to another.'" "deprecate:'Mark a non-production version of your app as deprecated, with removal by a certain date.'" "history:'Prints all edit history for your app.'" "logs:'Prints recent logs. See help for filter arguments.'" "env:'Read and write environment variables.'" "convert:'Converts a Zapier Platform app to a CLI app, stubs only.'")
    _describe 'commands' options
}

_arguments "--help[show help]" "1:command:getCommands" "2:arg:getOptions" "3:arg:getOptions" "4:arg:getOptions" "5:arg:getOptions"

